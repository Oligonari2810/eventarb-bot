#!/usr/bin/env python3
"""
Script de test para verificar conexi√≥n con Binance
NO ejecuta trades reales, solo verifica conectividad
"""

import os
from binance.spot import Spot as Binance
from dotenv import load_dotenv

def test_binance_connection():
    """Test de conexi√≥n b√°sica a Binance"""
    try:
        # Cargar variables de entorno
        load_dotenv()
        
        api_key = os.getenv("BINANCE_API_KEY")
        api_secret = os.getenv("BINANCE_API_SECRET")
        
        if not api_key or not api_secret:
            print("‚ùå BINANCE_API_KEY o BINANCE_API_SECRET no encontrados")
            return False
        
        # Crear cliente
        client = Binance(api_key=api_key, api_secret=api_secret)
        
        # Test 1: Ping
        print("üîç Test 1: Ping a Binance...")
        ping_result = client.ping()
        print(f"‚úÖ Ping OK: {ping_result}")
        
        # Test 2: Informaci√≥n de cuenta
        print("\nüîç Test 2: Informaci√≥n de cuenta...")
        account_info = client.account()
        print(f"‚úÖ Cuenta OK: {len(account_info.get('balances', []))} activos")
        
        # Test 3: Balance USDT
        usdt_balance = None
        for balance in account_info.get('balances', []):
            if balance['asset'] == 'USDT':
                usdt_balance = float(balance['free'])
                break
        
        if usdt_balance is not None:
            print(f"üí∞ Balance USDT: {usdt_balance:.2f}")
        else:
            print("‚ö†Ô∏è No se encontr√≥ balance USDT")
        
        # Test 4: Informaci√≥n del s√≠mbolo BTCUSDT
        print("\nüîç Test 3: Informaci√≥n de s√≠mbolo BTCUSDT...")
        symbol_info = client.exchange_info()
        btc_info = None
        for symbol in symbol_info.get('symbols', []):
            if symbol['symbol'] == 'BTCUSDT':
                btc_info = symbol
                break
        
        if btc_info:
            print(f"‚úÖ BTCUSDT disponible: {btc_info['status']}")
            print(f"   Base Asset: {btc_info['baseAsset']}")
            print(f"   Quote Asset: {btc_info['quoteAsset']}")
        else:
            print("‚ùå BTCUSDT no disponible")
        
        # Test 5: Precio actual BTCUSDT
        print("\nüîç Test 4: Precio actual BTCUSDT...")
        ticker = client.ticker_price(symbol="BTCUSDT")
        if ticker:
            print(f"‚úÖ Precio BTCUSDT: ${float(ticker['price']):,.2f}")
        else:
            print("‚ùå No se pudo obtener precio BTCUSDT")
        
        # Test 6: Verificar permisos de trading
        print("\nüîç Test 5: Permisos de trading...")
        api_restrictions = client.api_restrictions()
        print(f"‚úÖ Restricciones API: {api_restrictions}")
        
        print("\n" + "=" * 50)
        print("üéâ ¬°TODOS LOS TESTS PASARON EXITOSAMENTE!")
        print("‚úÖ Binance est√° conectado y funcionando correctamente")
        print("‚úÖ No se ejecutaron trades reales")
        print("‚úÖ Listo para operar en mainnet")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test de Binance: {e}")
        return False

def test_order_creation_simulation():
    """Simula la creaci√≥n de una orden sin ejecutarla"""
    try:
        print("\nüîç Test 6: Simulaci√≥n de creaci√≥n de orden...")
        
        # Cargar variables de entorno
        load_dotenv()
        
        api_key = os.getenv("BINANCE_API_KEY")
        api_secret = os.getenv("BINANCE_API_SECRET")
        
        if not api_key or not api_secret:
            print("‚ùå Credenciales no encontradas")
            return False
        
        client = Binance(api_key=api_key, api_secret=api_secret)
        
        # Obtener precio actual de BTCUSDT
        ticker = client.ticker_price(symbol="BTCUSDT")
        current_price = float(ticker['price'])
        
        # Simular par√°metros de orden (NO se ejecuta)
        symbol = "BTCUSDT"
        side = "BUY"
        quantity = 0.001  # M√≠nimo para BTC
        price = current_price * 0.95  # 5% debajo del precio actual (no se ejecutar√°)
        
        print(f"üìä Simulando orden:")
        print(f"   S√≠mbolo: {symbol}")
        print(f"   Lado: {side}")
        print(f"   Cantidad: {quantity}")
        print(f"   Precio l√≠mite: ${price:,.2f}")
        print(f"   Precio actual: ${current_price:,.2f}")
        print(f"   Notional: ${quantity * price:,.2f}")
        
        # Verificar que la orden NO se ejecute (precio muy bajo)
        print(f"‚úÖ Orden simulada - NO se ejecutar√° (precio l√≠mite < precio actual)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en simulaci√≥n de orden: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üß™ TEST DE CONECTIVIDAD BINANCE")
    print("=" * 50)
    print("‚ö†Ô∏è  IMPORTANTE: NO se ejecutar√°n trades reales")
    print()
    
    # Test de conexi√≥n b√°sica
    connection_ok = test_binance_connection()
    
    if connection_ok:
        # Test de simulaci√≥n de orden
        order_simulation_ok = test_order_creation_simulation()
        
        if order_simulation_ok:
            print("\nüéØ RESUMEN FINAL:")
            print("‚úÖ Conexi√≥n a Binance: OK")
            print("‚úÖ Simulaci√≥n de orden: OK")
            print("‚úÖ No se ejecutaron trades reales")
            print("‚úÖ Listo para operar en mainnet")
            print("\nüöÄ ¬°Puedes proceder con el lanzamiento!")
        else:
            print("\n‚ùå Simulaci√≥n de orden fall√≥")
            return False
    else:
        print("\n‚ùå Conexi√≥n a Binance fall√≥")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
