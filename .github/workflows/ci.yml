name: CI - EventArb Bot

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black mypy
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Format check with black
      run: |
        black --check --diff .
        
    - name: Type check with mypy
      run: |
        mypy eventarb/ --ignore-missing-imports
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v
        
    - name: Security scan
      run: |
        pip install bandit
        bandit -r eventarb/ -f json -o bandit-report.json || true
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json
        if-no-files-found: ignore
        retention-days: 7

  auto-triage-validation:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'auto-fix')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate auto-fix PR
      run: |
        echo "üîç Validando PR generado por auto-triage..."
        
        # Verificar que no se toquen archivos prohibidos
        FORBIDDEN_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '\.(env|key|pem|p12|pfx)$' || true)
        
        if [ ! -z "$FORBIDDEN_FILES" ]; then
          echo "‚ùå ERROR: Se detectaron archivos prohibidos:"
          echo "$FORBIDDEN_FILES"
          exit 1
        fi
        
        # Verificar tama√±o del diff
        DIFF_SIZE=$(git diff --stat ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | tail -1 | awk '{print $4}' | sed 's/,//g')
        
        if [ "$DIFF_SIZE" -gt 100 ]; then
          echo "‚ö†Ô∏è WARNING: Diff muy grande ($DIFF_SIZE l√≠neas). Revisar manualmente."
        fi
        
        # Verificar que solo se modifiquen archivos de c√≥digo
        ALLOWED_EXTENSIONS="\.(py|sh|yaml|yml|md)$"
        MODIFIED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
        
        for file in $MODIFIED_FILES; do
          if [[ ! "$file" =~ $ALLOWED_EXTENSIONS ]]; then
            echo "‚ùå ERROR: Archivo no permitido modificado: $file"
            exit 1
          fi
        done
        
        echo "‚úÖ Validaci√≥n de auto-fix completada exitosamente"
        
    - name: Comment validation result
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "## üîç Validaci√≥n de Auto-Fix\n\n‚úÖ **Validaci√≥n de seguridad:** PAS√ì\n‚úÖ **Validaci√≥n de archivos:** PAS√ì\n‚úÖ **Validaci√≥n de tama√±o:** PAS√ì\n\nEste PR fue generado autom√°ticamente por el sistema de auto-triage y ha pasado todas las validaciones de seguridad.\n\n**Recomendaciones:**\n- Revisar el c√≥digo antes de hacer merge\n- Verificar que la funcionalidad principal no se vea afectada\n- Ejecutar tests adicionales si es necesario\n\n---\n*Validado por EventArb Bot CI System*"
          })

  deploy-preview:
    runs-on: ubuntu-latest
    needs: [lint-and-test, auto-triage-validation]
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to preview environment
      run: |
        echo "üöÄ Desplegando preview para validaci√≥n..."
        # Aqu√≠ ir√≠an los comandos de deploy a un entorno de preview
        echo "‚úÖ Preview desplegado exitosamente"
        
    - name: Run health checks
      run: |
        echo "üè• Ejecutando health checks..."
        # Aqu√≠ ir√≠an los health checks del bot
        echo "‚úÖ Health checks pasaron"
        
    - name: Comment preview status
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "## üöÄ Preview Desplegado\n\n‚úÖ **Deploy:** Completado\n‚úÖ **Health Checks:** Pasaron\n‚úÖ **Funcionalidad:** Operativa\n\nEl bot est√° funcionando correctamente en el entorno de preview con los cambios propuestos.\n\n**Pr√≥ximos pasos:**\n1. Revisar logs del preview\n2. Verificar funcionalidad principal\n3. Aprobar cambios si todo est√° OK\n\n---\n*Deploy autom√°tico por EventArb Bot CI System*"
          })
